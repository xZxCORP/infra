---
- name: Prepare infrastructure
  hosts:
    - master
    - worker
  become: true
  tasks:
    - name: Create config directory
      ansible.builtin.file:
        path: /opt/config
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "0755"

    - name: Copy config files
      ansible.builtin.copy:
        src: config/
        dest: /opt/config/
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "0644"
        directory_mode: "0755"
  tags:
    - config
    - always

- name: Deploy general services
  hosts: master[0]
  become: true
  tasks:
    - name: Deploy Traefik
      ansible.builtin.include_role:
        name: stack_deploy
      vars:
        stack_deploy_name: "traefik"
        stack_deploy_compose_files:
          - "stacks/traefik.yml"
        stack_deploy_prune: true
    - name: Deploy Portainer
      ansible.builtin.include_role:
        name: stack_deploy
      vars:
        stack_deploy_name: "portainer"
        stack_deploy_compose_files:
          - "stacks/portainer.yml"
        stack_deploy_prune: true
    - name: Deploy RabbitMQ
      ansible.builtin.include_role:
        name: stack_deploy
      vars:
        stack_deploy_name: "rabbitmq"
        stack_deploy_compose_files:
          - "stacks/rabbitmq.yml"
        stack_deploy_prune: true
        stack_deploy_env_vars:
          RABBITMQ_USERNAME: "{{ rabbitmq_username }}"
          RABBITMQ_PASSWORD: "{{ rabbitmq_password }}"
    - name: Deploy Gatus
      ansible.builtin.include_role:
        name: stack_deploy
      vars:
        stack_deploy_name: "gatus"
        stack_deploy_compose_files:
          - "stacks/gatus.yml"
        stack_deploy_prune: true
        stack_deploy_env_vars:
          WEBHOOK_URL: "{{ webhook_url }}"
  tags:
    - general

- name: Deploy persistence services
  hosts: master[0]
  become: true
  tasks:
    - name: Deploy Postgres
      ansible.builtin.include_role:
        name: stack_deploy
      vars:
        stack_deploy_name: "postgres"
        stack_deploy_compose_files:
          - "stacks/postgres.yml"
        stack_deploy_prune: true
        stack_deploy_env_vars:
          POSTGRES_USER: "{{ postgres_user }}"
          POSTGRES_PASSWORD: "{{ postgres_password }}"
    - name: Deploy MongoDB
      ansible.builtin.include_role:
        name: stack_deploy
      vars:
        stack_deploy_name: "mongodb"
        stack_deploy_compose_files:
          - "stacks/mongodb.yml"
        stack_deploy_prune: true
        stack_deploy_env_vars:
          MONGODB_USER: "{{ mongodb_user }}"
          MONGODB_PASSWORD: "{{ mongodb_password }}"
          MONGODB_DATABASE: "{{ mongodb_database }}"
    - name: Deploy MinIO
      ansible.builtin.include_role:
        name: stack_deploy
      vars:
        stack_deploy_name: "minio"
        stack_deploy_compose_files:
          - "stacks/minio.yml"
        stack_deploy_prune: true
        stack_deploy_env_vars:
          MINIO_USERNAME: "{{ minio_username }}"
          MINIO_PASSWORD: "{{ minio_password }}"
    - name: Deploy Redis
      ansible.builtin.include_role:
        name: stack_deploy
      vars:
        stack_deploy_name: "redis"
        stack_deploy_compose_files:
          - "stacks/redis.yml"
        stack_deploy_prune: true
  tags:
    - persistence
- name: Deploy doc services
  hosts: master[0]
  become: true
  tasks:
    - name: Deploy Docmost
      ansible.builtin.include_role:
        name: stack_deploy
      vars:
        stack_deploy_name: "docmost"
        stack_deploy_compose_files:
          - "stacks/docs/docmost.yml"
        stack_deploy_prune: true
        stack_deploy_env_vars:
          DOCMOST_APP_SECRET: "{{ docmost_app_secret }}"
          POSTGRES_USER: "{{ postgres_user }}"
          POSTGRES_PASSWORD: "{{ postgres_password }}"
          MINIO_USERNAME: "{{ minio_username }}"
          MINIO_PASSWORD: "{{ minio_password }}"
          SMTP_HOST: "{{ smtp_host }}"
          SMTP_PORT: "{{ smtp_port }}"
          SMTP_USERNAME: "{{ smtp_username }}"
          SMTP_PASSWORD: "{{ smtp_password }}"
          SMTP_SECURE: "{{ smtp_secure }}"
  tags:
    - docs
- name: Deploy monitoring services
  hosts: master[0]
  become: true
  tasks:
    - name: Deploy Dozzle
      ansible.builtin.include_role:
        name: stack_deploy
      vars:
        stack_deploy_name: "dozzle"
        stack_deploy_compose_files:
          - "stacks/monitoring/dozzle.yml"
        stack_deploy_prune: true

  tags:
    - monitoring
- name: Deploy Wheelz Auth Service
  hosts: master[0]
  become: true
  tasks:
    - name: Deploy Wheelz Auth Service
      ansible.builtin.include_role:
        name: stack_deploy
      vars:
        stack_deploy_name: "wheelz-auth"
        stack_deploy_compose_files:
          - "stacks/wheelz/wheelz-auth.yml"
        stack_deploy_prune: true
        stack_deploy_env_vars:
          JWT_SECRET: "{{ jwt_secret }}"
          POSTGRES_USER: "{{ postgres_user }}"
          POSTGRES_PASSWORD: "{{ postgres_password }}"
  tags:
    - wheelz
    - wheelz_auth

- name: Deploy Wheelz User Service
  hosts: master[0]
  become: true
  tasks:
    - name: Deploy Wheelz User Service
      ansible.builtin.include_role:
        name: stack_deploy
      vars:
        stack_deploy_name: "wheelz-user"
        stack_deploy_compose_files:
          - "stacks/wheelz/wheelz-user.yml"
        stack_deploy_prune: true
        stack_deploy_env_vars:
          POSTGRES_USER: "{{ postgres_user }}"
          POSTGRES_PASSWORD: "{{ postgres_password }}"
  tags:
    - wheelz
    - wheelz_user

- name: Deploy Wheelz Chain Service
  hosts: master[0]
  become: true
  tasks:
    - name: Deploy Wheelz Chain Service
      ansible.builtin.include_role:
        name: stack_deploy
      vars:
        stack_deploy_name: "wheelz-chain"
        stack_deploy_compose_files:
          - "stacks/wheelz/wheelz-chain.yml"
        stack_deploy_prune: true
        stack_deploy_env_vars:
          SIGNATURE_ALGORITHM: "{{ signature_algorithm }}"
          SIGNATURE_PUBLIC: "{{ signature_public }}"
          SIGNATURE_PRIVATE: "{{ signature_private }}"
          ADMIN_EMAIL: "{{ admin_email }}"
          ADMIN_PASSWORD: "{{ admin_password }}"
          RABBITMQ_USERNAME: "{{ rabbitmq_username }}"
          RABBITMQ_PASSWORD: "{{ rabbitmq_password }}"
          POSTGRES_USER: "{{ postgres_user }}"
          POSTGRES_PASSWORD: "{{ postgres_password }}"
          MONGODB_USER: "{{ mongodb_user }}"
          MONGODB_PASSWORD: "{{ mongodb_password }}"
          MONGODB_DATABASE: "{{ mongodb_database }}"
  tags:
    - wheelz
    - wheelz_chain

- name: Deploy Wheelz Transaction Service
  hosts: master[0]
  become: true
  tasks:
    - name: Deploy Wheelz Transaction Service
      ansible.builtin.include_role:
        name: stack_deploy
      vars:
        stack_deploy_name: "wheelz-transaction"
        stack_deploy_compose_files:
          - "stacks/wheelz/wheelz-transaction.yml"
        stack_deploy_prune: true
        stack_deploy_env_vars:
          RABBITMQ_USERNAME: "{{ rabbitmq_username }}"
          RABBITMQ_PASSWORD: "{{ rabbitmq_password }}"
          MONGODB_USER: "{{ mongodb_user }}"
          MONGODB_PASSWORD: "{{ mongodb_password }}"
          MONGODB_DATABASE: "{{ mongodb_database }}"
          SIGNATURE_ALGORITHM: "{{ signature_algorithm }}"
          SIGNATURE_PRIVATE: "{{ signature_private }}"
          ADMIN_EMAIL: "{{ admin_email }}"
          ADMIN_PASSWORD: "{{ admin_password }}"
  tags:
    - wheelz
    - wheelz_transaction

- name: Deploy Wheelz Notification Service
  hosts: master[0]
  become: true
  tasks:
    - name: Deploy Wheelz Notification Service
      ansible.builtin.include_role:
        name: stack_deploy
      vars:
        stack_deploy_name: "wheelz-notification"
        stack_deploy_compose_files:
          - "stacks/wheelz/wheelz-notification.yml"
        stack_deploy_prune: true
        stack_deploy_env_vars:
          RABBITMQ_USERNAME: "{{ rabbitmq_username }}"
          RABBITMQ_PASSWORD: "{{ rabbitmq_password }}"
          SMTP_HOST: "{{ smtp_host }}"
          SMTP_PORT: "{{ smtp_port }}"
          SMTP_USERNAME: "{{ smtp_username }}"
          SMTP_PASSWORD: "{{ smtp_password }}"
  tags:
    - wheelz
    - wheelz_notification

- name: Deploy Wheelz Goblin Service
  hosts: master[0]
  become: true
  tasks:
    - name: Deploy Wheelz Goblin Service
      ansible.builtin.include_role:
        name: stack_deploy
      vars:
        stack_deploy_name: "wheelz-goblin"
        stack_deploy_compose_files:
          - "stacks/wheelz/wheelz-goblin.yml"
        stack_deploy_prune: true
  tags:
    - wheelz
    - wheelz_goblin

- name: Deploy Wheelz Kerek Service
  hosts: master[0]
  become: true
  tasks:
    - name: Deploy Wheelz Kerek Service
      ansible.builtin.include_role:
        name: stack_deploy
      vars:
        stack_deploy_name: "wheelz-kerek"
        stack_deploy_compose_files:
          - "stacks/wheelz/wheelz-kerek.yml"
        stack_deploy_prune: true
  tags:
    - wheelz
    - wheelz_kerek

- name: Deploy Wheelz Upload Service
  hosts: master[0]
  become: true
  tasks:
    - name: Deploy Wheelz Upload Service
      ansible.builtin.include_role:
        name: stack_deploy
      vars:
        stack_deploy_name: "wheelz-upload"
        stack_deploy_compose_files:
          - "stacks/wheelz/wheelz-upload.yml"
        stack_deploy_prune: true
        stack_deploy_env_vars:
          MINIO_USERNAME: "{{ minio_username }}"
          MINIO_PASSWORD: "{{ minio_password }}"
          POSTGRES_USER: "{{ postgres_user }}"
          POSTGRES_PASSWORD: "{{ postgres_password }}"
  tags:
    - wheelz
    - wheelz_upload

- name: Deploy Wheelz Front Service
  hosts: master[0]
  become: true
  tasks:
    - name: Deploy Wheelz Front Service
      ansible.builtin.include_role:
        name: stack_deploy
      vars:
        stack_deploy_name: "wheelz-front"
        stack_deploy_compose_files:
          - "stacks/wheelz/wheelz-front.yml"
        stack_deploy_prune: true
  tags:
    - wheelz
    - wheelz_front
